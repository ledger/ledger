# NOTE: Please validate this file after editing it using
#       Travis WebLint https://lint.travis-ci.org/
#       or travis-lint https://github.com/travis-ci/travis-lint

language: cpp
compiler:
  - gcc
os:
  - linux
  - osx
sudo: false
cache:
  apt: true

env:
  global:
      # List of required boost libraries to build
    - BOOST_LIBS="date_time,filesystem,iostreams,python,regex,system,test"
      # Encrypted COVERITY_SCAN_TOKEN
    - secure: "mYNxD1B8WNSvUeKzInehZ7syi2g1jH2ymeSQxoeKKD2duq3pvNWPdZdc4o9MlWQcAqcz58rhFZRIpuEWCnP0LbbJaG+MyuemMn9uAmg9Y4gFpMsBPHuTdf8pO3rDex+tkrr9puEJFgL+QV/TehxO6NDDpx7UdYvJb+4aZD/auYI="
  matrix:
    # Boost version to build against; an empty string means the
    # distribution's default.
    - BOOST_VERSION="" CMAKE_VERSION=""
    - BOOST_VERSION="1.70.0" CMAKE_VERSION="3.15.3"

# The configuration for macOS only works with Boost installed by
# homebrew, so exclude the other combinations.
matrix:
  exclude:
    - os: osx
      env: BOOST_VERSION="1.70.0" CMAKE_VERSION="3.15.3"

addons:
  coverity_scan:
    project:
      name: "ledger/ledger"
      description: "Build submitted via Travis CI"
    build_command_prepend: "cmake . -DUSE_PYTHON=ON -DBUILD_DEBUG=ON -DCLANG_GCOV=ON"
    build_command: "make"
    branch_pattern: coverity
  apt:
    packages:
      - libgmp-dev
      - libmpfr-dev
      - libedit-dev
      - libboost-dev
      - libboost-test-dev
      - libboost-regex-dev
      - libboost-python-dev
      - libboost-system-dev
      - libboost-date-time-dev
      - libboost-iostreams-dev
      - libboost-filesystem-dev
      - libboost-serialization-dev
  homebrew:
    packages:
      - cmake
      - boost
      - boost-python
      - gmp
      - mpfr
    update: true

before_install:
  - |
    if [ -n "${BOOST_VERSION}" ]; then
        BOOST_SOURCE="$(mktemp -d)"
        BOOST_SOURCE_URL="https://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//./_}.tar.bz2/download"
        curl -Ls "$BOOST_SOURCE_URL" |
        tar jx -C "${BOOST_SOURCE}" --strip-components 1
    fi

install:
  - |
    if [ -n "${BOOST_VERSION}" ]; then
        export BOOST_ROOT="${HOME}/boost"
        pushd "${BOOST_SOURCE}"
        ./bootstrap.sh --with-libraries="${BOOST_LIBS}"
        ./b2 threading=multi -d0 --prefix="${BOOST_ROOT}" install
        popd
        rm -Rf "${BOOST_SOURCE}"
    fi
  - |
    if [ -n "${CMAKE_VERSION}" ]; then
      export CMAKE_ROOT="${HOME}/cmake"
      mkdir "$CMAKE_ROOT"
      CMAKE_BIN_URL="https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
      curl -Ls "$CMAKE_BIN_URL" |
      tar x -C "$CMAKE_ROOT" --strip-components 1
    fi

before_script:
  # On macOS, CMake finds the Boost.Python installed by homebrew only
  # with the component name "python27".  Also, precompiling system.hh
  # does not work.
  - if [ "$TRAVIS_OS_NAME" = osx -a -z "$BOOST_VERSION" ]; then EXTRA_CMAKE_ARGS="-DPRECOMPILE_SYSTEM_HH=OFF -DUSE_PYTHON27_COMPONENT=ON"; fi
  - if [ -n "${CMAKE_VERSION}" ]; then CMAKE="${CMAKE_ROOT}/bin/cmake"; else CMAKE="cmake"; fi
  - $CMAKE . -DUSE_PYTHON=ON -DBUILD_DEBUG=ON $EXTRA_CMAKE_ARGS
  - make VERBOSE=1

script:
  - if [ -n "${CMAKE_VERSION}" ]; then CTEST="${CMAKE_ROOT}/bin/ctest"; else CTEST="ctest"; fi
  - $CTEST --output-on-failure
  - PYTHONPATH=. python python/demo.py

notifications:
  email:
    on_success: change
    on_failure: change
  irc:
    channels: [ "chat.freenode.net#ledger" ]
    on_success: change
    on_failure: change
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/0050d91909a8cde39e35
    on_success: change  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_start: never     # options: [always|never|change] default: always

